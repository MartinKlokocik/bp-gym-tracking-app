generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your database URL
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relations
  exercises          Exercise[]
  plannedExercises   PlannedExercise[]
  plannedWorkoutDays PlannedWorkoutDay[]
  plannedWorkouts    PlannedWorkout[]
  calendarDays       CalendarDay[]
  exerciseRecords    ExerciseRecord[]
}

model Exercise {
  id          String   @id @default(uuid())
  name        String
  description String
  type        String
  muscleGroup String
  equipment   String[] @default([])
  image       String?  @default("")
  isPublic    Boolean  @default(false)
  isDefault   Boolean  @default(false)

  // Relations
  user             User              @relation(fields: [userId], references: [id])
  userId      String
  plannedExercises PlannedExercise[]
  exerciseRecords  ExerciseRecord[]
}

model PlannedExercise {
  id     String  @id @default(uuid())
  notes  String?

  // Relations
  plannedSets PlannedSet[]

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  plannedWorkoutDay   PlannedWorkoutDay @relation(fields: [plannedWorkoutDayId], references: [id])
  plannedWorkoutDayId String

  user User @relation(fields: [userId], references: [id])
  userId String
}

model PlannedSet {
  id       String @id @default(uuid())
  reps     Int
  restTime Int?

  plannedExercise   PlannedExercise @relation(fields: [plannedExerciseId], references: [id])
  plannedExerciseId String
}

model PlannedWorkoutDay {
  id               String            @id @default(uuid())
  name             String

  // Relations
  calendarDays   CalendarDay[]
  plannedExercises PlannedExercise[]

  plannedWorkout   PlannedWorkout @relation(fields: [plannedWorkoutId], references: [id])
  plannedWorkoutId String
  user           User           @relation(fields: [userId], references: [id])
  userId         String
}


model PlannedWorkout {
  id       String   @id @default(uuid())
  name     String
  schema   String  @default("")
  isActive Boolean @default(false)
  isPublic Boolean @default(false)

  // Relations
  days PlannedWorkoutDay[]

  user User @relation(fields: [userId], references: [id])
  userId   String
}

model CalendarDay {
  id     String   @id @default(uuid())
  userId String
  date   DateTime

  // A calendar day links to one planned workout day
  plannedWorkoutDayId String
  plannedWorkoutDay   PlannedWorkoutDay @relation(fields: [plannedWorkoutDayId], references: [id])

  user User @relation(fields: [userId], references: [id])
}

model ExerciseRecord {
  id        String   @id @default(uuid())
  userId    String
  timestamp DateTime @default(now())

  // Reference the exercise that was performed
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  // Record sets (which include weight)
  recordSets RecordSet[]

  user User @relation(fields: [userId], references: [id])
}

model RecordSet {
  id       String   @id @default(uuid())
  reps     Int
  restTime Int?
  weight   Float // weight used for this set

  exerciseRecordId String
  exerciseRecord   ExerciseRecord @relation(fields: [exerciseRecordId], references: [id])
}
