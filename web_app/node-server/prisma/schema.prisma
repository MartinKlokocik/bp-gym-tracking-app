generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your database URL
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  isAdmin Boolean @default(false)

  // Relations
  exercises          Exercise[]
  plannedExercises   PlannedExercise[]
  plannedWorkoutDays PlannedWorkoutDay[]
  plannedWorkouts    PlannedWorkout[]
  calendarDays       CalendarDay[]
  exerciseRecords    ExerciseRecord[]
  profile            UserProfile?
  posts              Post[]
  postComments       PostComment[]
  reactions          Reaction[]
  devicePairing      DevicePairing[]
}

model UserProfile {
  id              String   @id @default(uuid())

  firstName String?
  lastName String?
  dateOfBirth String?
  gender String?
  profilePicture String?
  height Int?
  weight Int?

  fitnessLevel FitnessLevel?
  yearsOfExperience Int?
  primaryGoal String?
  secondaryGoals String[] @default([])
  preferredWorkoutDays Int?
  workoutDuration Int?
  availableEquipment String[] @default([])
  healthIssues String?
  injuries String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique
}

model Exercise {
  id          String   @id @default(uuid())
  name        String
  description String
  type        String
  muscleGroup String
  equipment   String[] @default([])
  image       String?  @default("")
  isPublic    Boolean  @default(false)
  isDefault   Boolean  @default(false)

  // Relations
  user             User              @relation(fields: [userId], references: [id])
  userId      String
  plannedExercises PlannedExercise[]
  exerciseRecords  ExerciseRecord[]
}

model PlannedExercise {
  id     String  @id @default(uuid())
  notes  String?
  exerciseNumber Int

  // Relations
  plannedSets PlannedSet[]

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  plannedWorkoutDay   PlannedWorkoutDay @relation(fields: [plannedWorkoutDayId], references: [id])
  plannedWorkoutDayId String

  user User @relation(fields: [userId], references: [id])
  userId String
}

model PlannedSet {
  id       String @id @default(uuid())
  reps     Int
  restTime Int?
  setNumber Int

  plannedExercise   PlannedExercise @relation(fields: [plannedExerciseId], references: [id])
  plannedExerciseId String
}

model PlannedWorkoutDay {
  id               String            @id @default(uuid())
  name             String

  // Relations
  calendarDays   CalendarDay[]
  plannedExercises PlannedExercise[]

  plannedWorkout   PlannedWorkout @relation(fields: [plannedWorkoutId], references: [id])
  plannedWorkoutId String
  user           User           @relation(fields: [userId], references: [id])
  userId         String
}


model PlannedWorkout {
  id       String   @id @default(uuid())
  name     String
  schema   String  @default("")
  isActive Boolean @default(false)
  isPublic Boolean @default(false)
  isDeleted Boolean @default(false)
  isDefault Boolean @default(false)
  
  // Relations
  days PlannedWorkoutDay[]

  user User @relation(fields: [userId], references: [id])
  userId   String
}

model CalendarDay {
  id     String   @id @default(uuid())
  date   String

  // Relations
  exerciseRecords ExerciseRecord[]

  plannedWorkoutDay   PlannedWorkoutDay @relation(fields: [plannedWorkoutDayId], references: [id])
  plannedWorkoutDayId String
  user User @relation(fields: [userId], references: [id])
  userId String
}

model ExerciseRecord {
  id        String   @id @default(uuid())
  date      String
  status    RecordStatus   @default(PENDING)
  notes     String?
  
  // Relations
  recordSets RecordSet[]

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  user User @relation(fields: [userId], references: [id])
  userId    String
  calendarDay   CalendarDay @relation(fields: [calendarDayId], references: [id])
  calendarDayId String
}

model RecordSet {
  id       String   @id @default(uuid())
  setNumber Int
  reps     Int
  restTime Int?
  weight   Float
  avgPulse Int?

  // Relations
  exerciseRecord   ExerciseRecord @relation(fields: [exerciseRecordId], references: [id])
  exerciseRecordId String
}

enum RecordStatus {
  PENDING
  COMPLETED
  SKIPPED
}

enum FitnessLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}


model Post {
  id      String @id @default(uuid())
  title   String
  content String
  image   String?
  tags    String[] @default([])
  attachedWorkoutPlan String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id])
  userId String
  comments PostComment[]
  reactions Reaction[]
}

model PostComment {
  id      String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)

  // Relations
  post Post @relation(fields: [postId], references: [id])
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String
  reactions Reaction[]
}

model Reaction {
  id      String @id @default(uuid())
  type    ReactionType
  target  ReactionTarget
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean @default(false)

  // Relations
  post Post? @relation(fields: [postId], references: [id])
  postId String?
  user User @relation(fields: [userId], references: [id])
  userId String
  postComment PostComment? @relation(fields: [postCommentId], references: [id])
  postCommentId String?
}

model DevicePairing {
  id String @id @default(uuid())
  userId String? 
  deviceUUID String
  isPaired Boolean @default(false)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

enum ReactionType {
  LIKE
  DISLIKE
}

enum ReactionTarget {
  POST
  COMMENT
}
