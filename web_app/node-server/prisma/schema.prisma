generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your database URL
}

model Calendar {
  id       Int           @id @default(autoincrement())
  userId   Int?
  date     DateTime
  planId   Int?
  notes    String?
  dayLogId Int?          @unique(map: "Calendar_DayLogId_Unique")
  user     User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan     TrainingPlan? @relation(fields: [planId], references: [id], onDelete: SetNull)
  dayLog   DayLog?       @relation(fields: [dayLogId], references: [id]) // Opposite relation

  @@unique([dayLogId], map: "Calendar_DayLogId_Unique_Index")
}

model DayLog {
  id             Int          @id @default(autoincrement())
  userId         Int
  steps          Int?
  caloriesIntake Int?
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutLogs    WorkoutLog[] // Relation with WorkoutLog
  calendar       Calendar?    @relation // Relation with Calendar
}

model ExerciseFile {
  id         Int      @id @default(autoincrement())
  exerciseId Int
  filePath   String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([exerciseId], map: "ExerciseFile_ExerciseId_Unique")
}

model Exercise {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  description       String?
  musclesTargeted   String?
  equipmentRequired String?
  isCustom          Boolean        @default(false)
  createdAt         DateTime       @default(now())
  planExercises     PlanExercise[]
  workoutLogs       WorkoutLog[]
  exerciseFiles     ExerciseFile[]
}

model PlanExercise {
  id              Int           @id @default(autoincrement())
  planId          Int?
  exerciseId      Int?
  sets            Int?
  reps            Int?
  weight          Float?
  restTimeSeconds Int?
  plan            TrainingPlan? @relation(fields: [planId], references: [id], onDelete: Cascade)
  exercise        Exercise?     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model TrainingPlan {
  id            Int            @id @default(autoincrement())
  userId        Int?
  name          String
  description   String?
  isPublic      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  planExercises PlanExercise[]
  calendars     Calendar[]
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  gender      String?
  heightCm    Int?
  weightKg    Float?
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  passwordHash  String
  createdAt     DateTime       @default(now())
  trainingPlans TrainingPlan[]
  userProfile   UserProfile?
  dayLogs       DayLog[]
  calendars     Calendar[]
  workoutLogs   WorkoutLog[]
}

model WorkoutLog {
  id              Int       @id @default(autoincrement())
  userId          Int?
  exerciseId      Int?
  dayLogId        Int       @unique(map: "WorkoutLog_DayLogId_Unique")
  performedSets   Int?
  performedReps   Int?
  weight          Float?
  durationSeconds Int?
  performedAt     DateTime
  heartRate       Int?
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise        Exercise? @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  dayLog          DayLog?   @relation(fields: [dayLogId], references: [id]) // Opposite relation
}
