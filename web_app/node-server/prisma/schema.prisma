generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your database URL
}

model Calendars {
  id       Int            @id @default(autoincrement())
  userId   Int?
  date     DateTime
  planId   Int?
  notes    String?
  dayLogId Int?           @unique(map: "Calendar_DayLogId_Unique")
  user     User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan     TrainingPlans? @relation(fields: [planId], references: [id], onDelete: SetNull)
  dayLog   DayLogs?       @relation(fields: [dayLogId], references: [id]) // Opposite relation

  @@unique([dayLogId], map: "Calendar_DayLogId_Unique_Index")
}

model DayLogs {
  id             Int           @id @default(autoincrement())
  userId         Int
  steps          Int?
  caloriesIntake Int?
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutLogs    WorkoutLogs[] // Relation with WorkoutLog
  calendar       Calendars?    @relation // Relation with Calendar
}

model ExerciseFiles {
  id         Int       @id @default(autoincrement())
  exerciseId Int
  filePath   String
  exercise   Exercises @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([exerciseId], map: "ExerciseFile_ExerciseId_Unique")
}

model Exercises {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  description       String?
  musclesTargeted   String?
  equipmentRequired String?
  isCustom          Boolean         @default(false)
  createdAt         DateTime        @default(now())
  planExercises     PlanExercises[]
  workoutLogs       WorkoutLogs[]
  exerciseFiles     ExerciseFiles[]
}

model PlanExercises {
  id              Int            @id @default(autoincrement())
  planId          Int?
  exerciseId      Int?
  sets            Int?
  reps            Int?
  weight          Float?
  restTimeSeconds Int?
  plan            TrainingPlans? @relation(fields: [planId], references: [id], onDelete: Cascade)
  exercise        Exercises?     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model TrainingPlans {
  id            Int             @id @default(autoincrement())
  userId        Int?
  name          String
  description   String?
  isPublic      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  user          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  planExercises PlanExercises[]
  calendars     Calendars[]
}

model UserProfiles {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  gender      String?
  heightCm    Int?
  weightKg    Float?
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkoutLogs {
  id              Int        @id @default(autoincrement())
  userId          Int?
  exerciseId      Int?
  dayLogId        Int        @unique(map: "WorkoutLog_DayLogId_Unique")
  performedSets   Int?
  performedReps   Int?
  weight          Float?
  durationSeconds Int?
  performedAt     DateTime
  heartRate       Int?
  user            User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise        Exercises? @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  dayLog          DayLogs?   @relation(fields: [dayLogId], references: [id]) // Opposite relation
}

// Do not delete this but take a look at those relations 
model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  name          String?
  createdAt     DateTime        @default(now())
  Calendars     Calendars[]
  DayLogs       DayLogs[]
  TrainingPlans TrainingPlans[]
  UserProfiles  UserProfiles?
  WorkoutLogs   WorkoutLogs[]
}
