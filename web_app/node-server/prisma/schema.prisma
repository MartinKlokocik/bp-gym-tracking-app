generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your database URL
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relations
  exercises          Exercise[]
  plannedExercises   PlannedExercise[]
  plannedWorkoutDays PlannedWorkoutDay[]
  plannedWorkouts    PlannedWorkout[]
  calendarDays       CalendarDay[]
  exerciseRecords    ExerciseRecord[]
}

model Exercise {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  description String
  muscleGroup String
  equipment   String[]
  image       String?  @default("")
  isPublic    Boolean  @default(false)
  isDefault   Boolean  @default(false)

  // Relations
  user             User              @relation(fields: [userId], references: [id])
  plannedExercises PlannedExercise[]
  exerciseRecords  ExerciseRecord[]
}

model PlannedExercise {
  id     Int  @id @default(autoincrement())
  userId Int
  notes  String?

  // Relation to the base exercise:
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  // Planned sets for this exercise
  plannedSets PlannedSet[]

  // Relation to the workout day:
  plannedWorkoutDayId Int
  plannedWorkoutDay   PlannedWorkoutDay @relation(fields: [plannedWorkoutDayId], references: [id])

  user User @relation(fields: [userId], references: [id])
}

model PlannedSet {
  id       Int @id @default(autoincrement())
  reps     Int
  restTime Int?

  plannedExerciseId Int
  plannedExercise   PlannedExercise @relation(fields: [plannedExerciseId], references: [id])
}

model PlannedWorkoutDay {
  id               Int            @id @default(autoincrement())
  userId           Int
  name             String
  plannedExercises PlannedExercise[]

  // Relation to the overall workout plan:
  plannedWorkoutId Int
  plannedWorkout   PlannedWorkout @relation(fields: [plannedWorkoutId], references: [id])

  // A workout day may appear on multiple calendar days
  calendarDays CalendarDay[]

  user User @relation(fields: [userId], references: [id])
}

model PlannedWorkout {
  id       Int    @id @default(autoincrement())
  userId   Int
  name     String
  schema   String
  isActive Boolean @default(false)
  isPublic Boolean @default(false)

  // One workout plan consists of many days
  days PlannedWorkoutDay[]

  user User @relation(fields: [userId], references: [id])
}

model CalendarDay {
  id     Int      @id @default(autoincrement())
  userId Int
  date   DateTime

  // A calendar day links to one planned workout day
  plannedWorkoutDayId Int
  plannedWorkoutDay   PlannedWorkoutDay @relation(fields: [plannedWorkoutDayId], references: [id])

  user User @relation(fields: [userId], references: [id])
}

model ExerciseRecord {
  id        Int      @id @default(autoincrement())
  userId    Int
  timestamp DateTime @default(now())

  // Reference the exercise that was performed
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  // Record sets (which include weight)
  recordSets RecordSet[]

  user User @relation(fields: [userId], references: [id])
}

model RecordSet {
  id       Int    @id @default(autoincrement())
  reps     Int
  restTime Int?
  weight   Float // weight used for this set

  exerciseRecordId Int
  exerciseRecord   ExerciseRecord @relation(fields: [exerciseRecordId], references: [id])
}
